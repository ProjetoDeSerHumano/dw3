{% extends "templates/base.html" %}

{% block content %}
  <div x-data="transacaoForm()">
    <ol class="breadcrumb mb-2">
      <li class="breadcrumb-item active">{{title}}</li>
    </ol>
    <div class="row">
      <div class="col-12">

        <div class="card-header">
          {{title}}
        </div>

        <div class="card-body">
          <div class="">

            <form>
              <div class="row">
                {# Campo: DESCRICAO #}
                <div class="col-md-6">
                  <div class="form-group">
                    <label for="descricao">Descrição da Transação</label>
                    <input type="text" class="form-control" id="descricao" x-model="form.descricao" required="required">
                  </div>
                </div>

                {# Campo: VALOR (Decimal) #}
                <div class="col-md-3">
                  <div class="form-group">
                    <label for="valor">Valor (R$)</label>
                    <input type="number" step="0.01" class="form-control" id="valor" x-model="form.valor" required="required">
                  </div>
                </div>

                {# Campo: DATA_TRANSACAO (Data) #}
                <div class="col-md-3">
                  <div class="form-group">
                    <label for="data_transacao">Data da Transação</label>
                    <input type="date" class="form-control" id="data_transacao" x-model="form.data_transacao" required="required">
                  </div>
                </div>
              </div>
              
              <div class="row">
                {# Campo: TIPO_OPERACAO (Texto) #}
                <div class="col-md-3">
                  <div class="form-group">
                    <label for="tipo_operacao">Tipo de Operação</label>
                    <select class="form-select" id="tipo_operacao" x-model="form.tipo_operacao" required="required">
                        <option value="">Selecione...</option>
                        <option value="Credito">Crédito (Entrada)</option>
                        <option value="Debito">Débito (Saída)</option>
                    </select>
                  </div>
                </div>

                {# Campo: ID_CONTA (Relacionamento 1:N) #}
                <div class="col-md-9">
                  <div class="form-group">
                    <label for="id_conta">Conta Corrente (Banco)</label>
                    <select class="form-select" aria-label="Default select example" id="id_conta" x-model="form.id_conta"
                      name="id_conta" required="required">
                      <option value="">Selecione a Conta...</option>
                      {# Loop para popular o dropdown com as contas (antigo curso) #}
                      {% for reg in conta %}
                        {# O valor é o ID da conta, o texto é uma combinação dos dados da conta #}
                        <option value="{{reg.idconta}}">{{reg.nome_banco}} - Ag: {{reg.numero_agencia}} - C/C: {{reg.numero_conta}}</option>
                      {%endfor%}
                    </select>
                  </div>
                </div>
              </div>

              {# Botões de Ação #}
              <button type="button" @click="insertForm()" class="btn btn-primary mt-4">Salvar</button>
              <a href="/transacoes/manutTransacoes" class="btn btn-info mt-4 ml-2" role="button" aria-disabled="true">Retornar</a>

            </form>

            <div class="mt-3">
              <template x-if="message">
                <div :class="messageClass" x-text="message"></div>
              </template>
            </div>
          </div>

        </div>
      </div>
    </div>
  </div>

  <script>

    window.onload = function () {
      windowOnLoad();

      const localErro = "{{erro}}";
      if (localErro != "") {
        alert("[vwTransacoes|onload]Servidor retornou o erro:" + localErro);
      }
      $("#descricao").focus(); // Foco no primeiro campo da Transação

    };

    function transacaoForm() { // Nome da função Alpine ajustado
      return {
        form: {
          // Campos da tabela TRANSACAO
          descricao: '',
          valor: '',
          data_transacao: '',
          tipo_operacao: '',
          id_conta: '', // Chave estrangeira
          deleted: false
        },
        message: '',
        messageClass: '',

        async insertForm() {
          try {
            console.log("Valor na página:", JSON.stringify(this.form))
            const response = await fetch('/transacoes/insertTransacoes', { // Rota ajustada
              method: 'POST',
              headers: {
                "Content-Type": "application/json"
              },
              body: JSON.stringify(this.form)
            });
            
            const result = await response.json();
            console.log("Valor na response:", response);
            console.log("Valor na result:", result);
            
            if (result.status=="ok") {
              alert("Transação cadastrada com sucesso"); // Mensagem ajustada
              this.resetForm();
            } else {
              const errorData = result.status;
              this.message = `Erro! Não foi possível cadastrar a transação devido ao erro: ${errorData}`; // Mensagem ajustada
              this.messageClass = 'alert alert-danger';
            }
          } catch (error) {
            this.message = `Erro de conexão: ${error.message}`;
            this.messageClass = 'alert alert-danger';
          }
        },

        resetForm() {
          this.form = {
            descricao: '',
            valor: '',
            data_transacao: '',
            tipo_operacao: '',
            id_conta: '',
            deleted: false
          };
          this.message=false;
        }
      };
    }
  </script>

{% endblock %}